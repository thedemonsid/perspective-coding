// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Course {
  id String @id @default(cuid())

  name        String  @unique
  slug        String  @unique
  description String
  image       String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  modules Module[]

  @@map("courses")
}

model Module {
  id String @id @default(cuid())

  name        String
  slug        String
  description String
  image       String?
  index       Int
  isFree      Boolean @default(false)

  courseId String
  course   Course @relation(fields: [courseId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  lessons Lesson[]

  @@unique([slug, courseId]) //* Ensure slug + courseId is unique
  @@index([courseId])
  @@map("modules")
}

model Lesson {
  id String @id @default(cuid())

  name        String
  slug        String
  description String
  image       String?
  content     String
  index       Int

  moduleId String
  module   Module @relation(fields: [moduleId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([slug, moduleId]) //* Ensure slug + moduleId is unique
  @@index([moduleId])
  @@map("lessons")
}

//! User Authentication
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  accounts      Account[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// ! This is a generated file. Do not edit this file directly.
